# -*- coding: utf-8 -*-
"""Untitled54.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsV8_E3lKilZ9xS8Dya2D4J2OVITVAlY
"""

import pandas as pd

data = pd .read_csv('/content/hr _salary.csv')

data.dropna(inplace=True)

data.drop_duplicates(inplace=True)

data.to_csv('cleaned_dataset.csv',index=False)

data.describe()

import matplotlib.pyplot as plt

# Visualize the distribution of salaries using a histogram
plt.figure(figsize=(10, 6))
plt.hist(data['Current Salary'], bins=20)
plt.xlabel('Current Salary')
plt.ylabel('Frequency')
plt.title('Distribution of Salaries')
plt.show()

# Visualize the relationship between experience and salary using a scatter plot
plt.figure(figsize=(5, 6))
plt.scatter(data['Years of Experience'], data['Current Salary'])
plt.xlabel('Years of Experience')
plt.ylabel('Current Salary')
plt.title('Relationship between Experience and Salary')
plt.show()

plt.boxplot(data['Years of Experience'])
plt.show()

data['Age'].value_counts().plot(kind='pie')
plt.show()

data['Age'].value_counts().plot(kind='bar')
plt.show()

data['Years of Experience'].value_counts().plot(kind='bar')
plt.rcParams['figure.figsize']=(7,5)
plt.xlabel('Age')
plt.ylabel('Current Salary')
plt.title('salary prediction')
plt.grid()
plt.show()

data['Years of Experience'].value_counts().plot(kind='pie')
plt.rcParams['figure.figsize'] = (7,10)
plt.show()

data['Years of Experience'].value_counts().plot(kind='hist')
plt.rcParams['figure.figsize'] = (7,10)
plt.show()



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import joblib

# Load the HR dataset
data = pd.read_csv('/content/hr _salary.csv')

# Assume 'Left' as 1 by default to indicate job switch
data['Left'] = data['Left'].fillna(1)

# Filter data for HR professionals who switched jobs
switched_jobs_data = data[data['Left'] == 1]

# Split the dataset into features (X) and target variable (y)
X = switched_jobs_data[['Years of Experience', 'Age']]
y = switched_jobs_data['Current Salary']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an instance of Linear Regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Save the model as a pickle file
joblib.dump(model, 'salary_prediction_model.pkl')

# Predict the salaries for the test set
y_pred = model.predict(X_test)

# Calculate the root mean squared error (RMSE)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print('Root Mean Squared Error:', rmse)

# Filter a particular person by their age, experience, and name
person_name = "John Doe"
person_age = 50
person_experience = 40

# Predict the salary for the particular person
base_salary = model.predict([[person_experience, person_age]])
experience_multiplier = 1.05  # Multiplier to adjust salary based on experience

# Increase salary based on experience
adjusted_salary = base_salary * (experience_multiplier ** person_experience)

# Print the salary after switching jobs
print('Salary of HR professional {} after switching jobs: ${}'.format(person_name, round(adjusted_salary[0], 2)))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import joblib

data = pd.read_csv('/content/hr _salary.csv')

data['Left'] = data['Left'].fillna(1)

X = switched_jobs_data[['Years of Experience', 'Age']]
y = switched_jobs_data['Current Salary']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

joblib.dump(model, 'salary_prediction_model.pkl')

y_pred = model.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
print('Root Mean Squared Error:', rmse)

person_name = "John Doe"
person_age = 50
person_experience = 40

base_salary = model.predict([[person_experience, person_age]])
experience_multiplier = 1.05

adjusted_salary = base_salary * (experience_multiplier ** person_experience)

print('Salary of HR professional {} after switching jobs: ${}'.format(person_name, round(adjusted_salary[0], 2)))